CREATE TABLE IF NOT EXISTS Student(
studentID INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(50) NOT NULL,
            active ENUM('Yes','No') NOT NULL,
            status ENUM('Full Time','Part Time','On academic probation','Failed standing','Suspended','Other') NOT NULL,
            position ENUM('Undergraduate','Graduate','Masters','Phd','Other') NOT NULL,
            internationality ENUM('Yes','No') NOT NULL,
            email VARCHAR(50) NOT NULL);

CREATE TABLE IF NOT EXISTS Course(
courseID INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
            name VARCHAR(50) NOT NULL,
            code VARCHAR(10) NOT NULL,
            credits REAL UNSIGNED NOT NULL);

CREATE TABLE IF NOT EXISTS Section(
sectionID INT UNSIGNED NOT NULL AUTO_INCREMENT,
	courseID INT UNSIGNED NOT NULL,
            semester ENUM('Fall','Winter','Summer1','Summer2') NOT NULL,
            year INT(4) NOT NULL,
            capacity INT(3) NOT NULL,
FOREIGN KEY (courseID) REFERENCES Course(courseID)
ON DELETE CASCADE
ON UPDATE CASCADE,
	PRIMARY KEY(sectionID, courseID));


CREATE TABLE IF NOT EXISTS CourseComponent(
courseComponentID INT UNSIGNED NOT NULL AUTO_INCREMENT,
sectionID INT UNSIGNED NOT NULL,
	courseID INT UNSIGNED NOT NULL,
            type VARCHAR(50) NOT NULL,
            weight INT UNSIGNED NOT NULL,
FOREIGN KEY (sectionID) REFERENCES Section(sectionID)
ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY (courseID) REFERENCES Section(courseID)
ON DELETE CASCADE
ON UPDATE CASCADE,
	PRIMARY KEY(courseComponentID, sectionID, courseID));



CREATE TABLE IF NOT EXISTS Grade(
grade INT NOT NULL,
            studentID INT UNSIGNED NOT NULL,
            sectionID INT UNSIGNED NOT NULL,
            courseID INT UNSIGNED NOT NULL,
            coursecomponentID INT UNSIGNED,
            FOREIGN KEY (studentID) REFERENCES Student(studentID)
ON DELETE CASCADE 
ON UPDATE CASCADE,
          	FOREIGN KEY (sectionID) REFERENCES CourseComponent(sectionID)
           		ON DELETE CASCADE 
ON UPDATE CASCADE,
          	FOREIGN KEY (courseComponentID) REFERENCES CourseComponent (coursecomponentID)
           		ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY (courseID) REFERENCES CourseComponent (courseID)
           		ON DELETE CASCADE
ON UPDATE CASCADE,
PRIMARY KEY(CourseComponentID, StudentID, SectionID));


CREATE TABLE IF NOT EXISTS EnrolledIn(
finalGrade Enum('A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'F', 'NA', 'DISC', 'DNE') NOT NULL,
studentID INT UNSIGNED NOT NULL,
sectionID INT UNSIGNED NOT NULL,
courseID INT UNSIGNED NOT NULL,
FOREIGN KEY (studentID) REFERENCES Student(studentID)
ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY (sectionID) REFERENCES Section(sectionID)
ON DELETE CASCADE
ON UPDATE CASCADE,
FOREIGN KEY (courseID) REFERENCES Section(courseID)
ON DELETE CASCADE
ON UPDATE CASCADE,
PRIMARY KEY(studentID, sectionID, courseID));


CREATE TABLE IF NOT EXISTS Teacher(
teacherID INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
          	name VARCHAR(50) NOT NULL,
         	yearsOfService INT(3) UNSIGNED NOT NULL,
        	rank VARCHAR(100) NOT NULL,
password VARCHAR(50) NOT NULL,
email VARCHAR(50) NOT NULL );


CREATE TABLE IF NOT EXISTS Teaches(
teacherID INT UNSIGNED NOT NULL,
         	sectionID INT UNSIGNED NOT NULL,
       	courseID INT UNSIGNED NOT NULL,
         	FOREIGN KEY (teacherID) REFERENCES Teacher(teacherID)
        		ON DELETE CASCADE 
ON UPDATE CASCADE,
        	FOREIGN KEY (sectionID) REFERENCES Section(sectionID)
                   	ON DELETE CASCADE 
ON UPDATE CASCADE,
FOREIGN KEY (courseID) REFERENCES Section(courseID)
                     	ON DELETE CASCADE 
ON UPDATE CASCADE,
PRIMARY KEY(teacherID, sectionID, courseID));



CREATE TABLE IF NOT EXISTS ResearchGrant(
grantID INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(100) NOT NULL,
           	amount INT UNSIGNED NOT NULL,
         	remainingAmount INT UNSIGNED NOT NULL);


 CREATE TABLE IF NOT EXISTS GivenGrant(
teacherID INT UNSIGNED NOT NULL,
grantID INT UNSIGNED NOT NULL,
            FOREIGN KEY (teacherID) REFERENCES Teacher(teacherID)
ON DELETE CASCADE 
ON UPDATE CASCADE,
FOREIGN KEY (grantID) REFERENCES ResearchGrant(grantID)
ON DELETE CASCADE 
ON UPDATE CASCADE,
PRIMARY KEY(teacherID, grantID));

CREATE TABLE IF NOT EXISTS Research(
researchID INT UNSIGNED NOT NULL AUTO_INCREMENT,
name VARCHAR(50) NOT NULL,
details VARCHAR(25) NOT NULL,
teacherID INT UNSIGNED NOT NULL,
	FOREIGN KEY (teacherID) REFERENCES Teacher(teacherID)
ON DELETE CASCADE 
ON UPDATE CASCADE,
PRIMARY KEY (researchID, teacherID));

CREATE TABLE IF NOT EXISTS SupervisedResearch(
teacherID INT UNSIGNED NOT NULL,
researchID INT UNSIGNED NOT NULL,
studentID INT UNSIGNED NOT NULL,
grantID INT UNSIGNED NOT NULL,
startDate DATE NOT NULL,
endDate DATE NOT NULL,
	amount INT UNSIGNED NOT NULL,
            FOREIGN KEY (teacherID) REFERENCES Research(teacherID)
ON DELETE CASCADE 
ON UPDATE CASCADE,
FOREIGN KEY (studentID) REFERENCES Student(studentID)
	ON DELETE CASCADE 
ON UPDATE CASCADE,
FOREIGN KEY (researchID) REFERENCES Research(researchID)
ON DELETE CASCADE 
ON UPDATE CASCADE,
FOREIGN KEY (grantID) REFERENCES ResearchGrant(grantID)
ON DELETE CASCADE 
ON UPDATE CASCADE,
           PRIMARY KEY(teacherID, studentID, researchID, grantID));


CREATE TABLE IF NOT EXISTS Journal(
journalID INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(100) NOT NULL,
date DATE NOT NULL);


CREATE TABLE IF NOT EXISTS JournalArticle(
articleID INT UNSIGNED NOT NULL AUTO_INCREMENT,
	journalID INT UNSIGNED NOT NULL,
name VARCHAR(100) NOT NULL,
  	authorName VARCHAR(50) NOT NULL,
date DATE NOT NULL,
FOREIGN KEY (journalID) REFERENCES Journal(journalID)
ON DELETE CASCADE 
ON UPDATE CASCADE,  
PRIMARY KEY(articleID, journalID));

 CREATE TABLE IF NOT EXISTS OnBoardOf(
journalID INT UNSIGNED NOT NULL,
	teacherID INT UNSIGNED NOT NULL,
	FOREIGN KEY (teacherID) REFERENCES Teacher(teacherID)
ON DELETE CASCADE 
ON UPDATE CASCADE,
FOREIGN KEY (journalID) REFERENCES Journal(journalID)
	ON DELETE CASCADE 
ON UPDATE CASCADE,
PRIMARY KEY (journalID, teacherID));



CREATE TABLE IF NOT EXISTS Reviewed(
teacherID INT UNSIGNED NOT NULL,
articleID INT UNSIGNED NOT NULL,
journalID INT UNSIGNED NOT NULL,
	date DATE NOT NULL,
            FOREIGN KEY (teacherID) REFERENCES Teacher(teacherID)
ON DELETE CASCADE 
ON UPDATE CASCADE,
FOREIGN KEY (articleID) REFERENCES JournalArticle(articleID)
ON DELETE CASCADE 
ON UPDATE CASCADE,
FOREIGN KEY (journalID) REFERENCES JournalArticle(journalID)
ON DELETE CASCADE 
ON UPDATE CASCADE,
PRIMARY KEY(teacherID, articleID, journalID));


CREATE TABLE IF NOT EXISTS Service(
serviceID INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
type VARCHAR(100) NOT NULL);


CREATE TABLE IF NOT EXISTS Performs(
serviceID INT UNSIGNED NOT NULL,
	teacherID INT UNSIGNED NOT NULL,
	info VARCHAR(100) NOT NULL,
	startDate DATE NOT NULL,
	endDate DATE NOT NULL,
	FOREIGN KEY (teacherID) REFERENCES Teacher(teacherID)
ON DELETE CASCADE 
ON UPDATE CASCADE,
FOREIGN KEY (serviceID) REFERENCES Service(serviceID)
ON DELETE CASCADE 
ON UPDATE CASCADE,
PRIMARY KEY (serviceID, teacherID));


